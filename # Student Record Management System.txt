# Student Record Management System using Singly Linked List

class Node:
    def __init__(self, roll_no, name, marks):
        self.roll_no = roll_no
        self.name = name
        self.marks = marks
        self.next = None

class StudentList:
    def __init__(self):
        self.head = None

    # Add a new student record
    def add_student(self, roll_no, name, marks):
        new_node = Node(roll_no, name, marks)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
        print("✅ Student record added successfully!")

    # Delete a student record by roll number
    def delete_student(self, roll_no):
        current = self.head
        prev = None
        while current:
            if current.roll_no == roll_no:
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                print(f"🗑️ Student with Roll No {roll_no} deleted.")
                return
            prev = current
            current = current.next
        print("⚠️ Student not found!")

    # Update student record
    def update_student(self, roll_no, name, marks):
        current = self.head
        while current:
            if current.roll_no == roll_no:
                current.name = name
                current.marks = marks
                print("✏️ Record updated successfully!")
                return
            current = current.next
        print("⚠️ Student not found!")

    # Search for a student
    def search_student(self, roll_no):
        current = self.head
        while current:
            if current.roll_no == roll_no:
                print(f"🔍 Found: Roll No: {current.roll_no}, Name: {current.name}, Marks: {current.marks}")
                return
            current = current.next
        print("⚠️ Student not found!")

    # Sort records by roll number or marks
    def sort_records(self, key="roll_no", ascending=True):
        if self.head is None or self.head.next is None:
            print("⚠️ Not enough records to sort.")
            return

        swapped = True
        while swapped:
            swapped = False
            current = self.head
            while current.next:
                first = getattr(current, key)
                second = getattr(current.next, key)
                if (ascending and first > second) or (not ascending and first < second):
                    # Swap data (not nodes)
                    current.roll_no, current.next.roll_no = current.next.roll_no, current.roll_no
                    current.name, current.next.name = current.next.name, current.name
                    current.marks, current.next.marks = current.next.marks, current.marks
                    swapped = True
                current = current.next
        print(f"✅ Records sorted by {key} in {'ascending' if ascending else 'descending'} order.")

    # Display all student records
    def display(self):
        if self.head is None:
            print("📭 No records to display.")
            return
        print("\n🎓 Student Records:")
        print("Roll No\tName\tMarks")
        current = self.head
        while current:
            print(f"{current.roll_no}\t{current.name}\t{current.marks}")
            current = current.next


# --- Main Menu ---
students = StudentList()

while True:
    print("\n--- Student Record Management System ---")
    print("1. Add Student")
    print("2. Delete Student")
    print("3. Update Student")
    print("4. Search Student")
    print("5. Sort Records")
    print("6. Display All Students")
    print("7. Exit")

    choice = input("Enter your choice: ")

    if choice == '1':
        roll = int(input("Enter Roll No: "))
        name = input("Enter Name: ")
        marks = float(input("Enter Marks: "))
        students.add_student(roll, name, marks)

    elif choice == '2':
        roll = int(input("Enter Roll No to delete: "))
        students.delete_student(roll)

    elif choice == '3':
        roll = int(input("Enter Roll No to update: "))
        name = input("Enter new Name: ")
        marks = float(input("Enter new Marks: "))
        students.update_student(roll, name, marks)

    elif choice == '4':
        roll = int(input("Enter Roll No to search: "))
        students.search_student(roll)

    elif choice == '5':
        print("Sort by: 1. Roll No  2. Marks")
        key_choice = input("Enter choice: ")
        key = "roll_no" if key_choice == '1' else "marks"
        order = input("Ascending (A) or Descending (D)? ").lower()
        ascending = True if order == 'a' else False
        students.sort_records(key, ascending)

    elif choice == '6':
        students.display()

    elif choice == '7':
        print("👋 Exiting System...")
        break

    else:
        print("❌ Invalid choice. Try again.")
